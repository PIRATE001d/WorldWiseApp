import { useNavigate } from 'react-router-dom';
import styles from './form.module.css';
import { UseUrlPosition } from '../hooks/useUrlPosition';
import { useEffect, useState } from 'react';
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { useContext } from 'react';
import { CitiesContext } from '../contexts/citiesContext';




function Form() {
const {createCity} = useContext(CitiesContext);

  function countryCodeToEmoji(countryCode) {
    if (!countryCode) return '';
    return countryCode
      .toUpperCase()
      .split('')
      .map(char => String.fromCodePoint(char.charCodeAt(0) + 127397))
      .join('');
  }

  const navigate = useNavigate();

  const [cityName, setCityName] = useState('');
  const [country, setCountry] = useState('');
  const [date, setDate] = useState('');
  const [notes, setNotes] = useState('');
  const [emoji, setEmoji] = useState('');
  const [Error, setError] = useState('');

  const { Maplat, Maplng } = UseUrlPosition();

  const ApiKey = "bdc_b84cde972e9e4042a50bd020a9101e0a";

  useEffect(() => {
    if (!Maplat || !Maplng) return; // Skip fetch if Maplat or Maplng are not available
  
    async function fetchCityData() {
      try {
        setError('');
        
        // Make sure the request URL includes the correct API key
        const response = await fetch(
          `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${Maplat}&longitude=${Maplng}&localityLanguage=en&apikey=${ApiKey}`
        );
        
        // Check for a non-200 status
        if (!response.ok) {
          throw new Error(`Request failed with status: ${response.status}`);
        }
  
        const data = await response.json();

        if (!data.city && !data.countryCode) {
          throw new Error('No city or country code found');
        }
  
        setCityName(data.city || data.locality || '');
        setCountry(data.countryName || '');
        setEmoji(countryCodeToEmoji(data.countryCode));
        console.log('Fetched data:', data);
      } catch (error) {
        setError(error.message);  // Set error message to state for display
        console.log('Error fetching city data:', error);
      }
    }
  
    fetchCityData();
  }, [Maplat, Maplng, Error]);  // Add Error to the dependency array
  
  console.log('Latitude:', Maplat, 'Longitude:', Maplng);


  const handleSubmit = (e) => {
    e.preventDefault();
    if (!cityName || !date) return;

    const newCity = {
      cityName,
      country,
      date,
      emoji,
      notes,
      position: {
        lat: Maplat,
        lng: Maplng
      }
    };

    console.log(newCity);  

    createCity(newCity);
        navigate('/WorldWise/cities');  // Navigate after logging the data
  };

  if (!Maplat || !Maplng) {
    return (
      <div className={styles.formContainer}>
        <p>Click On the county or City you have visited...</p>
        <button onClick={() => navigate('/WorldWise/cities')}>&larr; Back</button>
      </div>
    );
  }
  

  if (Error) {
    return (
      <div className={styles.formContainer}>
        <p>{Error}</p>
        <button onClick={() => navigate('/WorldWise/cities')}>&larr; Back</button>
      </div>
    );
  }

  return (
    <div className={styles.formContainer}>
      <form onSubmit={handleSubmit}>
        <div className={styles.inputWithEmoji}>
          <label htmlFor="cityName">City Name:</label>
          <input
            type="text"
            id="cityName"
            name="cityName"
            placeholder="Enter city name"
            onChange={(e) => setCityName(e.target.value)}
            required
            value={`${cityName} `}
          />
          <span className={styles.emoji}>{emoji}</span>
        </div>
        <div>
          <label htmlFor="whenDidYouGo">When did you go?</label>
          <DatePicker
            selected={date}
            onChange={date => setDate(date)}
            dateFormat="dd/MM/yyyy"
            placeholderText="Click to select a date"
            required
          />
        </div>
        <div>
          <label htmlFor="notes">Notes:</label>
          <textarea
            id="notes"
            name="notes"
            placeholder="Add any notes"
            rows="4"
            onChange={(e) => setNotes(e.target.value)}
            value={notes}
          />
        </div>
        <div className={styles.buttonWrapper}>
          <button type="submit">Submit</button>
          <button type="button" onClick={() => navigate('/WorldWise/cities')}>
            &larr; Back
          </button>
        </div>
      </form>
    </div>
  );
}

export default Form;
